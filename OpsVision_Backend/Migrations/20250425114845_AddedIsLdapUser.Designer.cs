// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpsVision_Backend.Data;

#nullable disable

namespace OpsVision_Backend.Migrations
{
    [DbContext(typeof(FteDbContext))]
    [Migration("20250425114845_AddedIsLdapUser")]
    partial class AddedIsLdapUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Model.CompletedHoursLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CompletedHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DateLogged")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FteAllocationId")
                        .HasColumnType("int");

                    b.Property<string>("TaskNote")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FteAllocationId");

                    b.ToTable("CompletedHoursLogs");
                });

            modelBuilder.Entity("Model.Departments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Model.EmployeeAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AllocatedHours")
                        .HasColumnType("double");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("CommitedHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAllocatedHours")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("EmployeeAllocations");
                });

            modelBuilder.Entity("Model.EmploymentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TypeId");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("Model.History.AuditTrail", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChangeSummary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("Model.History.EmploymentHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ChangedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("FieldChanged")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewValue")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValue")
                        .HasColumnType("longtext");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("EmploymentHistories");
                });

            modelBuilder.Entity("Model.History.ReportingHistory", b =>
                {
                    b.Property<int>("ReportHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportHistoryId"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ChangedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("NewManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("OldManagerId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("ReportHistoryId");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("NewManagerId");

                    b.HasIndex("OldManagerId");

                    b.HasIndex("StaffId");

                    b.ToTable("ReportingHistories");
                });

            modelBuilder.Entity("Model.History.TerminationLog", b =>
                {
                    b.Property<int>("TerminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TerminationId"));

                    b.Property<int>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TerminationId");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("StaffId");

                    b.ToTable("TerminationLogs");
                });

            modelBuilder.Entity("Model.HolidayCalender", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HolidayDay")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsNationalHoliday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("HolidayId");

                    b.ToTable("HolidayCalenders");
                });

            modelBuilder.Entity("Model.JobTitles", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("Model.Locations", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Model.ManagementCodes", b =>
                {
                    b.Property<int>("MgtCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MgtCodeId"));

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MgtCodeId");

                    b.ToTable("ManagementCodes");
                });

            modelBuilder.Entity("Model.OrgRelationships", b =>
                {
                    b.Property<int>("RelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RelationshipId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RelationshipId");

                    b.ToTable("OrganizationalRelationships");
                });

            modelBuilder.Entity("Model.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ClassCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("ClassCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PrimeCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectManager")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Shifts", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ShiftId"));

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("ShiftName")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("ShiftId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("CUID")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<bool>("IsLdapUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsShiftWorker")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MgtCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportsToStaffId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffClassId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MgtCodeId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("ReportsToStaffId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StaffClassId");

                    b.HasIndex("StaffNumber")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("VendorId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Model.StaffClasses", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClassId");

                    b.ToTable("StaffClasses");
                });

            modelBuilder.Entity("Model.StaffStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StatusId");

                    b.ToTable("StaffStatuses");
                });

            modelBuilder.Entity("Model.Transaction.FteAllocation", b =>
                {
                    b.Property<int>("FteAllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FteAllocationId"));

                    b.Property<float>("AllocatedHours")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CommittedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("CommittedHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("DelegatedBy")
                        .HasColumnType("int");

                    b.Property<float>("FteCalculated")
                        .HasColumnType("float");

                    b.Property<bool>("IsShiftWorker")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProjectFteId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<float?>("RemainingHours")
                        .HasColumnType("float");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("FteAllocationId");

                    b.HasIndex("DelegatedBy");

                    b.HasIndex("ProjectFteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("FteAllocations");
                });

            modelBuilder.Entity("Model.Transaction.FteCommittedLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("DateCommitted")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("EmpRemainingHours")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("FteAllocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("HoursCommitted")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("LogId");

                    b.HasIndex("FteAllocationId");

                    b.HasIndex("StaffId");

                    b.ToTable("FteCommittedLogs");
                });

            modelBuilder.Entity("Model.Transaction.ProjectAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedByStaffId")
                        .HasColumnType("int");

                    b.Property<int>("AssigneeStaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DelegatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("RoleAssigned")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByStaffId");

                    b.HasIndex("AssigneeStaffId");

                    b.HasIndex("DelegatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAssignments");
                });

            modelBuilder.Entity("Model.Transaction.ProjectFteAllocation", b =>
                {
                    b.Property<int>("ProjectFteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectFteId"));

                    b.Property<float>("AllocatedFte")
                        .HasColumnType("float");

                    b.Property<float>("AllocatedHours")
                        .HasColumnType("float");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ProjectFteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StaffId");

                    b.ToTable("ProjectFteAllocations");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Vendors", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("VendorName")
                        .HasColumnType("longtext");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Model.CompletedHoursLog", b =>
                {
                    b.HasOne("Model.Transaction.FteAllocation", "FteAllocation")
                        .WithMany()
                        .HasForeignKey("FteAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FteAllocation");
                });

            modelBuilder.Entity("Model.EmployeeAllocation", b =>
                {
                    b.HasOne("Model.Projects", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.History.AuditTrail", b =>
                {
                    b.HasOne("Model.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", null)
                        .WithMany("ModifiedAuditTrails")
                        .HasForeignKey("StaffId");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("Model.History.EmploymentHistory", b =>
                {
                    b.HasOne("Model.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.History.ReportingHistory", b =>
                {
                    b.HasOne("Model.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Staff", "NewManager")
                        .WithMany("ReportingHistoriesAsNewManager")
                        .HasForeignKey("NewManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Staff", "OldManager")
                        .WithMany("ReportingHistoriesAsOldManager")
                        .HasForeignKey("OldManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany("ReportingHistories")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("NewManager");

                    b.Navigation("OldManager");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.History.TerminationLog", b =>
                {
                    b.HasOne("Model.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany("TerminationLogs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.Projects", b =>
                {
                    b.HasOne("Model.Staff", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.HasOne("Model.Departments", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Model.EmploymentType", "EmploymentType")
                        .WithMany("Staffs")
                        .HasForeignKey("EmploymentTypeId");

                    b.HasOne("Model.JobTitles", "JobTitle")
                        .WithMany("Staffs")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("Model.Locations", "Location")
                        .WithMany("Staffs")
                        .HasForeignKey("LocationId");

                    b.HasOne("Model.ManagementCodes", "ManagementCode")
                        .WithMany("Staffs")
                        .HasForeignKey("MgtCodeId");

                    b.HasOne("Model.OrgRelationships", "Relationship")
                        .WithMany("Staffs")
                        .HasForeignKey("RelationshipId");

                    b.HasOne("Model.Staff", "ReportsTo")
                        .WithMany("DirectReports")
                        .HasForeignKey("ReportsToStaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shifts", "Shift")
                        .WithMany("Staffs")
                        .HasForeignKey("ShiftId");

                    b.HasOne("Model.StaffClasses", "StaffClass")
                        .WithMany("Staffs")
                        .HasForeignKey("StaffClassId");

                    b.HasOne("Model.StaffStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Model.Vendors", "Vendor")
                        .WithMany("Staffs")
                        .HasForeignKey("VendorId");

                    b.Navigation("Department");

                    b.Navigation("EmploymentType");

                    b.Navigation("JobTitle");

                    b.Navigation("Location");

                    b.Navigation("ManagementCode");

                    b.Navigation("Relationship");

                    b.Navigation("ReportsTo");

                    b.Navigation("Shift");

                    b.Navigation("StaffClass");

                    b.Navigation("Status");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Model.Transaction.FteAllocation", b =>
                {
                    b.HasOne("Model.Staff", "Delegator")
                        .WithMany()
                        .HasForeignKey("DelegatedBy");

                    b.HasOne("Model.Transaction.ProjectFteAllocation", "ProjectFteAllocation")
                        .WithMany("FteAllocations")
                        .HasForeignKey("ProjectFteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Projects", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany("FteAllocations")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delegator");

                    b.Navigation("Project");

                    b.Navigation("ProjectFteAllocation");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.Transaction.FteCommittedLog", b =>
                {
                    b.HasOne("Model.Transaction.FteAllocation", "FteAllocation")
                        .WithMany("CommittedLogs")
                        .HasForeignKey("FteAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FteAllocation");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Model.Transaction.ProjectAssignment", b =>
                {
                    b.HasOne("Model.Staff", "AssignedBy")
                        .WithMany("ProjectsAssignedByThisStaff")
                        .HasForeignKey("AssignedByStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Staff", "Assignee")
                        .WithMany("ProjectsThisStaffIsAssignedTo")
                        .HasForeignKey("AssigneeStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Model.Staff", "DelegatedByStaff")
                        .WithMany()
                        .HasForeignKey("DelegatedBy");

                    b.HasOne("Model.Projects", "Project")
                        .WithMany("ProjectAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedBy");

                    b.Navigation("Assignee");

                    b.Navigation("DelegatedByStaff");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Model.Transaction.ProjectFteAllocation", b =>
                {
                    b.HasOne("Model.Projects", "Project")
                        .WithMany("FteAllocations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Staff", null)
                        .WithMany("ProjectFteAllocations")
                        .HasForeignKey("StaffId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.HasOne("Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Model.Departments", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.EmploymentType", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.JobTitles", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.Locations", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.ManagementCodes", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.OrgRelationships", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.Projects", b =>
                {
                    b.Navigation("FteAllocations");

                    b.Navigation("ProjectAssignments");
                });

            modelBuilder.Entity("Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Shifts", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.Navigation("DirectReports");

                    b.Navigation("FteAllocations");

                    b.Navigation("ModifiedAuditTrails");

                    b.Navigation("ProjectFteAllocations");

                    b.Navigation("ProjectsAssignedByThisStaff");

                    b.Navigation("ProjectsThisStaffIsAssignedTo");

                    b.Navigation("ReportingHistories");

                    b.Navigation("ReportingHistoriesAsNewManager");

                    b.Navigation("ReportingHistoriesAsOldManager");

                    b.Navigation("TerminationLogs");
                });

            modelBuilder.Entity("Model.StaffClasses", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Model.Transaction.FteAllocation", b =>
                {
                    b.Navigation("CommittedLogs");
                });

            modelBuilder.Entity("Model.Transaction.ProjectFteAllocation", b =>
                {
                    b.Navigation("FteAllocations");
                });

            modelBuilder.Entity("Model.Vendors", b =>
                {
                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
